// hooks/useSessionManager.ts
import { useEffect, useRef, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { useSchoolStore } from '@/store';
import { getCurrentUser, updateLastActivity, forceLogout } from '@/lib/userStore';
import toast from 'react-hot-toast';

const SESSION_CHECK_INTERVAL = 5000; // 5 secondes pour un compte √† rebours plus pr√©cis
const ACTIVITY_UPDATE_INTERVAL = 15000; // 15 secondes

export const useSessionManager = () => {
  const router = useRouter();
  const { userOnline, setUserOnline } = useSchoolStore();
  const sessionCheckRef = useRef<NodeJS.Timeout | null>(null);
  const activityUpdateRef = useRef<NodeJS.Timeout | null>(null);

  // V√©rifier si l'utilisateur a un r√¥le standard
  const hasStandardRole = useCallback(() => {
    return userOnline?.roles?.some(role => 
      ['caisse'].includes(role.name.toLowerCase())
    ) || false;
  }, [userOnline]);

  // Calculer le temps restant avant expiration
  const calculateRemainingTime = useCallback((user: any) => {
    const now = Date.now();
    
    if (user.requiresInactivityCheck) {
      // Pour les r√¥les standards, calculer bas√© sur la derni√®re activit√©
      const inactivityThreshold = 3 * 60 * 1000; // 3 minutes
      const timeSinceLastActivity = now - user.lastActivity;
      return Math.max(0, inactivityThreshold - timeSinceLastActivity);
    } else {
      // Pour les autres r√¥les, calculer bas√© sur l'expiration de session
      return Math.max(0, user.expiresAt - now);
    }
  }, []);

  // Formater le temps pour l'affichage
  const formatTime = useCallback((milliseconds: number) => {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  }, []);

  // Fonction de d√©connexion
  const logout = useCallback(async (reason: string = '') => {
    console.log(`üîí Tentative de d√©connexion: ${reason}`);
    console.trace('Stack trace de la d√©connexion');
    
    // Nettoyer les intervalles
    if (sessionCheckRef.current) {
      clearInterval(sessionCheckRef.current);
    }
    if (activityUpdateRef.current) {
      clearInterval(activityUpdateRef.current);
    }

    // Supprimer l'utilisateur du store et de IndexedDB
    setUserOnline(null);
    await forceLogout();
    
    // Afficher le message et rediriger
    if (reason) {
      toast.error(reason);
    }
    
    router.push('/');
  }, [router, setUserOnline]);

  // V√©rification p√©riodique de la session
  const checkSession = useCallback(async () => {
    try {
      // console.log('üîç V√©rification de la session en cours...');
      const user = await getCurrentUser();
      console.log('Utilisateur actuel:', user ? 'Connect√©' : 'Non connect√©');
      
      if (!user && userOnline) {
        console.log('üö® D√©connexion n√©cessaire: utilisateur non trouv√© mais toujours connect√© dans le store');
        // L'utilisateur a √©t√© d√©connect√© (session expir√©e ou inactivit√©)
        const reason = hasStandardRole() 
          ? 'D√©connexion pour inactivit√© (3 minutes)'
          : 'Votre session a expir√©';
        await logout(reason);
        return;
      }
      
      if (user && !userOnline) {
        // Restaurer l'utilisateur dans le store
        setUserOnline(user);
      }

      // üïê COMPTE √Ä REBOURS DANS LA CONSOLE
      // if (user && userOnline) {
      //   const remainingTime = calculateRemainingTime(user);
      //   const remainingSeconds = Math.floor(remainingTime / 1000);
        
      //   if (remainingSeconds > 0) {
      //     const roleType = hasStandardRole() ? '‚è∞ INACTIVIT√â' : 'üïê SESSION';
      //     const timeFormatted = formatTime(remainingTime);
          
      //     // Afficher le compte √† rebours
      //     console.log(`${roleType} - Temps restant: ${timeFormatted} (${remainingSeconds}s)`);
          
      //     // Avertissements √† des moments cl√©s
      //     if (remainingSeconds === 60) {
      //       console.warn('‚ö†Ô∏è  1 MINUTE RESTANTE avant d√©connexion !');
      //     } else if (remainingSeconds === 30) {
      //       console.warn('‚ö†Ô∏è  30 SECONDES RESTANTES avant d√©connexion !');
      //     } else if (remainingSeconds === 10) {
      //       console.warn('üö® 10 SECONDES RESTANTES avant d√©connexion !');
      //     } else if (remainingSeconds <= 5 && remainingSeconds > 0) {
      //       console.error(`üö® D√âCONNEXION DANS ${remainingSeconds} SECONDE${remainingSeconds > 1 ? 'S' : ''} !`);
      //     }
      //   }
      // }
    } catch (error) {
      console.error('Erreur lors de la v√©rification de session:', error);
    }
  }, [userOnline, setUserOnline, logout, hasStandardRole, calculateRemainingTime, formatTime]);

  // Gestion des √©v√©nements d'activit√©
  const handleActivity = useCallback(() => {
    // Mise √† jour imm√©diate de l'activit√© pour les r√¥les standards
    if (hasStandardRole()) {
      updateLastActivity();
      // console.log('üîÑ Activit√© d√©tect√©e - Timer d\'inactivit√© remis √† z√©ro');
    }
  }, [hasStandardRole]);

  // Mise √† jour p√©riodique de l'activit√©
  const updateActivity = useCallback(async () => {
    if (userOnline) {
      try {
        await updateLastActivity();
      } catch (error) {
        console.error('Erreur lors de la mise √† jour de l\'activit√©:', error);
      }
    }
  }, [userOnline]);

  // D√©marrer la surveillance
  const startSessionMonitoring = useCallback(() => {
    // console.log('üöÄ Surveillance de session d√©marr√©e');
    
    // V√©rification de session toutes les 5 secondes pour le compte √† rebours
    sessionCheckRef.current = setInterval(checkSession, SESSION_CHECK_INTERVAL);
    
    // Mise √† jour de l'activit√© toutes les 15 secondes
    activityUpdateRef.current = setInterval(updateActivity, ACTIVITY_UPDATE_INTERVAL);

    // √âcouter les √©v√©nements d'activit√© seulement pour les r√¥les standards
    if (hasStandardRole()) {
      // console.log('üëÄ Surveillance d\'activit√© activ√©e (r√¥le Caisse)');
      const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
      events.forEach(event => {
        document.addEventListener(event, handleActivity, true);
      });

      return () => {
        // console.log('üõë Surveillance arr√™t√©e');
        // Nettoyer les intervalles
        if (sessionCheckRef.current) {
          clearInterval(sessionCheckRef.current);
        }
        if (activityUpdateRef.current) {
          clearInterval(activityUpdateRef.current);
        }
        
        // Nettoyer les √©v√©nements
        events.forEach(event => {
          document.removeEventListener(event, handleActivity, true);
        });
      };
    } else {
      console.log('üìÖ Surveillance de session simple (r√¥le avec acc√®s complet)');
    }

    return () => {
      console.log('üõë Surveillance arr√™t√©e');
      if (sessionCheckRef.current) {
        clearInterval(sessionCheckRef.current);
      }
      if (activityUpdateRef.current) {
        clearInterval(activityUpdateRef.current);
      }
    };
  }, [checkSession, updateActivity, handleActivity, hasStandardRole]);

  // Arr√™ter la surveillance
  const stopSessionMonitoring = useCallback(() => {
    // console.log('‚èπÔ∏è  Arr√™t de la surveillance de session');
    if (sessionCheckRef.current) {
      clearInterval(sessionCheckRef.current);
      sessionCheckRef.current = null;
    }
    if (activityUpdateRef.current) {
      clearInterval(activityUpdateRef.current);
      activityUpdateRef.current = null;
    }
  }, []);

  // Effet pour d√©marrer/arr√™ter la surveillance selon l'√©tat de connexion
  useEffect(() => {
    // console.log('üîÑ Mise √† jour de l\'√©tat de connexion:', userOnline ? 'Connect√©' : 'D√©connect√©');
    if (userOnline) {
      console.log('üë§ Utilisateur connect√©, d√©marrage de la surveillance');
      const cleanup = startSessionMonitoring();
      return () => {
        // console.log('üßπ Nettoyage de la surveillance de session');
        cleanup?.();
      };
    } else {
      console.log('üë§ Aucun utilisateur connect√©, arr√™t de la surveillance');
      stopSessionMonitoring();
    }
  }, [userOnline, startSessionMonitoring, stopSessionMonitoring]);

  // V√©rification initiale
  useEffect(() => {
    if (userOnline) {
      // console.log('üîç V√©rification initiale de session');
      checkSession();
    }
  }, []);

  return {
    logout,
    checkSession,
    isMonitoring: !!sessionCheckRef.current,
    hasStandardRole: hasStandardRole()
  };
};