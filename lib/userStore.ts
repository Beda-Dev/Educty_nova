// lib/userStore.ts
import { openDB } from 'idb';
import type { User } from '@/lib/interface';

const DB_NAME = 'AppDB';
const STORE_NAME = 'userWithPermissions';
const DB_VERSION = 1;
const SESSION_DURATION_MINUTES = Number(process.env.NEXT_PUBLIC_SESSION_DURATION_MINUTES) || 60;

// R√¥les qui n√©cessitent une d√©connexion apr√®s inactivit√©
const STANDARD_ROLES = ['caisse']; // en lowercase
const INACTIVITY_TIMEOUT_MINUTES = 3; // 3 minutes d'inactivit√© pour les r√¥les standards

type UserWithSession = User & {
  expiresAt: number; // timestamp en ms
  lastActivity: number; // timestamp de derni√®re activit√©
  requiresInactivityCheck: boolean; // si l'utilisateur doit √™tre d√©connect√© apr√®s inactivit√©
};

export const getDB = async () => {
  try {
    const db = await openDB(DB_NAME, DB_VERSION, {
      upgrade(db) {
        if (!db.objectStoreNames.contains(STORE_NAME)) {
          db.createObjectStore(STORE_NAME, { keyPath: 'id' });
        }
      },
    });
    return db;
  } catch (error) {
    console.error('‚ùå getDB - Erreur lors de la connexion √† la base de donn√©es:', error);
    throw error;
  }
};

// V√©rifie si un utilisateur a un r√¥le standard
const hasStandardRole = (user: User): boolean => {
  return user.roles?.some(role => 
    STANDARD_ROLES.includes(role.name.toLowerCase())
  ) || false;
};

// Met √† jour la derni√®re activit√© de l'utilisateur
export const updateLastActivity = async () => {
  try {
    const db = await getDB();
    const allUsers = await db.getAll(STORE_NAME) as UserWithSession[];
    
    if (allUsers.length > 0) {
      const user = allUsers[0];
      user.lastActivity = Date.now();
      await db.put(STORE_NAME, user);
    }
  } catch (error) {
    console.error('‚ùå updateLastActivity - Erreur:', error);
  }
};

// ‚úÖ Sauvegarde utilisateur avec date d'expiration et gestion d'inactivit√©
export const saveUser = async (user: User) => {
  try {
    const db = await getDB();
    const expiresAt = Date.now() + SESSION_DURATION_MINUTES * 60 * 1000;
    const now = Date.now();
    
    const userWithSession: UserWithSession = { 
      ...user, 
      expiresAt,
      lastActivity: now,
      requiresInactivityCheck: hasStandardRole(user)
    };
    
    await db.put(STORE_NAME, userWithSession);
    
    console.log('‚úÖ saveUser - Utilisateur sauvegard√©:', { 
      userId: user.id,
      email: user.email,
      requiresInactivityCheck: userWithSession.requiresInactivityCheck,
      expiresAt: new Date(expiresAt).toLocaleString()
    });
  } catch (error) {
    console.error('‚ùå saveUser - Erreur lors de la sauvegarde:', error);
    throw error;
  }
};

// ‚úÖ R√©cup√®re l'utilisateur en v√©rifiant la session ET l'inactivit√©
export const getCurrentUser = async (): Promise<User | null> => {
  try {
    const db = await getDB();
    const allUsers = await db.getAll(STORE_NAME) as UserWithSession[];

    if (allUsers.length === 0) {
      return null;
    }

    const user = allUsers[0];
    const now = Date.now();

    // V√©rification de l'expiration de session
    if (now > user.expiresAt) {
      console.log('‚åõ getCurrentUser - Session expir√©e');
      await db.clear(STORE_NAME);
      return null;
    }

    // V√©rification de l'inactivit√© pour les r√¥les standards
    if (user.requiresInactivityCheck) {
      const inactivityThreshold = INACTIVITY_TIMEOUT_MINUTES * 60 * 1000;
      const timeSinceLastActivity = now - user.lastActivity;
      
      if (timeSinceLastActivity > inactivityThreshold) {
        console.log('‚è∞ getCurrentUser - D√©connexion pour inactivit√© (r√¥le standard)');
        await db.clear(STORE_NAME);
        return null;
      }
    }

    return user;
  } catch (error) {
    console.error('‚ùå getCurrentUser - Erreur:', error);
    return null;
  }
};

// ‚úÖ Force la d√©connexion
export const forceLogout = async () => {
  try {
    const db = await getDB();
    await db.clear(STORE_NAME);
    console.log('üîí forceLogout - D√©connexion forc√©e effectu√©e');
  } catch (error) {
    console.error('‚ùå forceLogout - Erreur:', error);
    throw error;
  }
};

// ‚úÖ Supprimer tous les utilisateurs
export const deleteUser = async () => {
  try {
    const db = await getDB();
    await db.clear(STORE_NAME);
    console.log('‚úÖ deleteUser - Tous les utilisateurs supprim√©s');
  } catch (error) {
    console.error('‚ùå deleteUser - Erreur:', error);
    throw error;
  }
};

// ‚úÖ Liste tous les utilisateurs (debug)
export const getAllUsers = async (): Promise<User[]> => {
  try {
    const db = await getDB();
    const users = await db.getAll(STORE_NAME);
    return users;
  } catch (error) {
    console.error('‚ùå getAllUsers - Erreur:', error);
    throw error;
  }
};